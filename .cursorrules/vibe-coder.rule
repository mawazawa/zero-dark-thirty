// .cursorrules/vibe-coder.rule
// ██╗   ██╗  ██╗  ██████╗   ███████╗      ██████╗   ██████╗   ██████╗   ███████╗  ██████╗
// ██║   ██║  ██║  ██╔══██╗  ██╔════╝     ██╔════╝  ██╔═══██╗  ██╔══██╗  ██╔════╝  ██╔══██╗
// ██║   ██║  ██║  ██████╔╝  █████╗       ██║       ██║   ██║  ██║  ██║  █████╗    ██████╔╝
// ╚██╗ ██╔╝  ██║  ██╔══██╗  ██╔══╝       ██║       ██║   ██║  ██║  ██║  ██╔══╝    ██╔══██╗
//  ╚████╔╝   ██║  ██████╔╝  ███████╗     ╚██████╗  ╚██████╔╝  ██████╔╝  ███████╗  ██║  ██║
//   ╚═══╝    ╚═╝  ╚═════╝   ╚══════╝      ╚═════╝   ╚═════╝   ╚═════╝   ╚══════╝  ╚═╝  ╚═╝

// VIBE CODER RULES: HUMAN FLOW STATE OVER EVERYTHING

// Deployment Philosophy:
// - v0.dev → Vercel (DIRECT TO PRODUCTION)
// - GitHub only when absolutely necessary
// - Ship fast, optimize later
// - Flow state preservation is PRIORITY ONE

// ██████╗   ███████╗  ██╗   ██╗      ███████╗  ███╗   ██╗  ██╗   ██╗  ██╗  ██████╗    ██████╗   ███╗   ██╗  ███╗   ███╗  ███████╗  ███╗   ██╗  ████████╗
// ██╔══██╗  ██╔════╝  ██║   ██║      ██╔════╝  ████╗  ██║  ██║   ██║  ██║  ██╔══██╗  ██╔═══██╗  ████╗  ██║  ████╗ ████║  ██╔════╝  ████╗  ██║  ╚══██╔══╝
// ██║  ██║  █████╗    ██║   ██║      █████╗    ██╔██╗ ██║  ██║   ██║  ██║  ██████╔╝  ██║   ██║  ██╔██╗ ██║  ██╔████╔██║  █████╗    ██╔██╗ ██║     ██║
// ██║  ██║  ██╔══╝    ╚██╗ ██╔╝      ██╔══╝    ██║╚██╗██║  ╚██╗ ██╔╝  ██║  ██╔══██╗  ██║   ██║  ██║╚██╗██║  ██║╚██╔╝██║  ██╔══╝    ██║╚██╗██║     ██║
// ██████╔╝  ███████╗   ╚████╔╝       ███████╗  ██║ ╚████║   ╚████╔╝   ██║  ██║  ██║  ╚██████╔╝  ██║ ╚████║  ██║ ╚═╝ ██║  ███████╗  ██║ ╚████║     ██║
// ╚═════╝   ╚══════╝    ╚═══╝        ╚══════╝  ╚═╝  ╚═══╝    ╚═══╝    ╚═╝  ╚═╝  ╚═╝   ╚═════╝   ╚═╝  ╚═══╝  ╚═╝     ╚═╝  ╚══════╝  ╚═╝  ╚═══╝     ╚═╝

// Docker Environment:
// - Container-first development environment
// - Use Docker for ALL development work
// - Docker Compose for multi-container environments
// - Dockerize all projects for consistency
// - Ensure Docker Desktop is running
// - Use Docker volume mounts for live code updates

// Code Style:
// 1. Use TypeScript for EVERYTHING - zero exceptions
// 2. Tailwind over CSS - always
// 3. Functional components only
// 4. No Redux - use React Context or hooks
// 5. Mobile-first, responsive design
// 6. Dark mode by default

// ████████╗  ███████╗  ███████╗  ████████╗  ██╗  ███╗   ██╗   ██████╗       ██████╗   ██████╗   ████████╗  ██╗  ███╗   ███╗  ██╗  ███████╗   █████╗   ████████╗  ██╗   ██████╗   ███╗   ██╗
// ╚══██╔══╝  ██╔════╝  ██╔════╝  ╚══██╔══╝  ██║  ████╗  ██║  ██╔════╝      ██╔═══██╗  ██╔══██╗  ╚══██╔══╝  ██║  ████╗ ████║  ██║  ╚══███╔╝  ██╔══██╗  ╚══██╔══╝  ██║  ██╔═══██╗  ████╗  ██║
//    ██║     █████╗    ███████╗     ██║     ██║  ██╔██╗ ██║  ██║  ███╗     ██║   ██║  ██████╔╝     ██║     ██║  ██╔████╔██║  ██║    ███╔╝   ███████║     ██║     ██║  ██║   ██║  ██╔██╗ ██║
//    ██║     ██╔══╝    ╚════██║     ██║     ██║  ██║╚██╗██║  ██║   ██║     ██║   ██║  ██╔═══╝      ██║     ██║  ██║╚██╔╝██║  ██║   ███╔╝    ██╔══██║     ██║     ██║  ██║   ██║  ██║╚██╗██║
//    ██║     ███████╗  ███████║     ██║     ██║  ██║ ╚████║  ╚██████╔╝     ╚██████╔╝  ██║          ██║     ██║  ██║ ╚═╝ ██║  ██║  ███████╗  ██║  ██║     ██║     ██║  ╚██████╔╝  ██║ ╚████║
//    ╚═╝     ╚══════╝  ╚══════╝     ╚═╝     ╚═╝  ╚═╝  ╚═══╝   ╚═════╝       ╚═════╝   ╚═╝          ╚═╝     ╚═╝  ╚═╝     ╚═╝  ╚═╝  ╚══════╝  ╚═╝  ╚═╝     ╚═╝     ╚═╝   ╚═════╝   ╚═╝  ╚═══╝

// Testing/Optimization:
// 1. Lighthouse score minimum: 90+
// 2. Always lazy-load images and heavy components
// 3. Always use Next.js Image component
// 4. Use Suspense and dynamic imports for code splitting
// 5. Test on mobile FIRST, desktop second
// 6. Add performance monitoring and analytics

// ██╗   ██╗  ██╗      ██╗   ██╗  ██╗  ███████╗  ██╗   ██╗   █████╗   ██╗       ██╗  ██╗  ██╗  ███████╗  ██████╗    █████╗   ██████╗    ██████╗  ██╗  ██╗  ██╗   ██╗
// ██║   ██║  ██║      ██║   ██║  ██║  ██╔════╝  ██║   ██║  ██╔══██╗  ██║       ██║  ██║  ██║  ██╔════╝  ██╔══██╗  ██╔══██╗  ██╔══██╗  ██╔════╝  ██║  ╚██╗ ██╔╝
// ██║   ██║  ██║      ██║   ██║  ██║  ███████╗  ██║   ██║  ███████║  ██║       ██║  ██║  ██║  █████╗    ██████╔╝  ███████║  ██████╔╝  ██║       ██║   ╚████╔╝
// ╚██╗ ██╔╝  ██║      ██║   ██║  ██║  ╚════██║  ██║   ██║  ██╔══██║  ██║       ██║  ██║  ██║  ██╔══╝    ██╔══██╗  ██╔══██║  ██╔══██╗  ██║       ██║    ╚██╔╝
//  ╚████╔╝   ███████╗  ╚██████╔╝  ██║  ███████║  ╚██████╔╝  ██║  ██║  ███████╗  ██║  ██████╔╝  ███████╗  ██║  ██║  ██║  ██║  ██║  ██║  ╚██████╗  ██║     ██║
//   ╚═══╝    ╚══════╝   ╚═════╝   ╚═╝  ╚══════╝   ╚═════╝   ╚═╝  ╚═╝  ╚══════╝  ╚═╝  ╚═════╝   ╚══════╝  ╚═╝  ╚═╝  ╚═╝  ╚═╝  ╚═╝  ╚═╝   ╚═════╝  ╚═╝     ╚═╝

// UI Standards:
// 1. Aceternity UI components preferred
// 2. Radix UI as fallback
// 3. Avoid Material UI - too corporate
// 4. Subtle animations for micro-interactions
// 5. Dark mode as default, light mode as option
// 6. ShadCN typography system
// 7. Consistent color system